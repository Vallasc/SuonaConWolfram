(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.2' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[     85548,       1692]
NotebookOptionsPosition[     84482,       1664]
NotebookOutlinePosition[     85009,       1683]
CellTagsIndexPosition[     84966,       1680]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell[BoxData[{
 RowBox[{
  RowBox[{
  "Import", "[", "\"\<C:\\\\Repos\\\\SuonaConWolfram\\\\SuonaConNoi.wl\>\"", 
   "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"LearnNotes", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"\"\<C3\>\"", ",", "\"\<D3\>\"", ",", "\"\<F3\>\""}], "}"}], 
      ",", " ", "\"\<Tasti bianchi\>\""}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"\"\<C#3\>\"", ",", "\"\<D#3\>\"", ",", "\"\<F#3\>\""}], "}"}],
       ",", " ", "\"\<Tasti neri\>\""}], "}"}]}], "}"}], "]"}]}], "Input",
 CellChangeTimes->{{3.8300101813071012`*^9, 3.830010186394134*^9}, {
   3.8300102379615808`*^9, 3.8300103189065914`*^9}, {3.8300109077364345`*^9, 
   3.8300109112223225`*^9}, 3.830255822536435*^9, 3.830400170369232*^9, 
   3.8304036150640965`*^9, {3.830403738893303*^9, 3.8304037397333*^9}, 
   3.8304045939593635`*^9, 3.8304046253974724`*^9, 3.8304057166155853`*^9, 
   3.8304057701513495`*^9, {3.8304072222235355`*^9, 3.8304072380311975`*^9}, {
   3.830407316751399*^9, 3.830407317775416*^9}, {3.830407772674285*^9, 
   3.830407790247718*^9}, {3.8304078366560464`*^9, 3.830407839665618*^9}, {
   3.830408448761451*^9, 3.830408457529138*^9}, {3.830410042618412*^9, 
   3.830410071250181*^9}, {3.8304126283749833`*^9, 3.830412647022537*^9}, {
   3.8304126787588844`*^9, 3.830412690966668*^9}, {3.8304127924549665`*^9, 
   3.8304127950617776`*^9}, 3.8304233300420723`*^9, 3.83059105982512*^9, 
   3.8305911334814267`*^9, 3.8305913622868385`*^9, 3.8305917518824563`*^9, 
   3.8305940668926144`*^9, 3.830598629512996*^9},
 CellLabel->"In[2]:=",ExpressionUUID->"9a9f7170-c734-4902-8ab4-66271908c5ea"],

Cell[BoxData[
 PanelBox[
  TagBox[GridBox[{
     {
      DynamicBox[ToBoxes[
        Text[
         Style[SuonaConNoi`Private`titleLearn, Black, Bold, 24]], 
        StandardForm],
       ImageSizeCache->{333., {6., 23.}}]},
     {
      DynamicBox[ToBoxes[
        If[SuonaConNoi`Private`noteLearnStarted, 
         Button[
         "Ricomincia", SuonaConNoi`Private`errorsLearn = 0; 
          SuonaConNoi`Private`midiNotesLearn = {{{"C3", "D3", "F3"}, 
              "Tasti bianchi"}, {{"C#3", "D#3", "F#3"}, "Tasti neri"}}; 
          SuonaConNoi`Private`currentList = {}; 
          SuonaConNoi`Private`nextNoteLearn, ImageSize -> {200, Automatic}, 
          Method -> "Queued", BaseStyle -> {"GenericButton", 16, Bold, 
            Darker[Orange]}, Background -> LightOrange], 
         Button[
         "Start", SuonaConNoi`Private`noteLearnStarted = True; 
          SuonaConNoi`Private`nextNoteLearn, ImageSize -> {200, Automatic}, 
          Method -> "Queued", BaseStyle -> {"GenericButton", 16, Bold, 
            Darker[Orange]}, Background -> LightOrange]], StandardForm],
       ImageSizeCache->{200., {11., 20.}}]},
     {
      DynamicModuleBox[{SuonaConNoi`Private`shownotes$$ = False}, 
       TagBox[
        StyleBox[
         DynamicModuleBox[{Typeset`show$$ = True, Typeset`bookmarkList$$ = {},
           Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
          Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
          Typeset`specs$$ = {{{
             Hold[SuonaConNoi`Private`shownotes$$], False, "Mostra note"}, {
            True, False}}}, Typeset`size$$ = {868., {138.5, 144.5}}, 
          Typeset`update$$ = 0, Typeset`initDone$$, Typeset`skipInitDone$$ = 
          False}, 
          
          DynamicBox[Manipulate`ManipulateBoxes[
           1, StandardForm, 
            "Variables" :> {SuonaConNoi`Private`shownotes$$ = False}, 
            "ControllerVariables" :> {}, 
            "OtherVariables" :> {
             Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
              Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
              Typeset`specs$$, Typeset`size$$, Typeset`update$$, 
              Typeset`initDone$$, Typeset`skipInitDone$$}, 
            "Body" :> (SuonaConNoi`Private`whitekey[
                Pattern[SuonaConNoi`Private`note$, 
                 Blank[]], 
                Pattern[SuonaConNoi`Private`oct$, 
                 Blank[]]] := Mouseover[
                Graphics[{{
                   EdgeForm[], 
                   Switch[0, 0, 
                    If[
                    SuonaConNoi`Private`selectedNoteLearn == 
                    SuonaConNoi`Private`joinNote[
                    SuonaConNoi`Private`note$, SuonaConNoi`Private`oct$], 
                    Lighter[Green], White], 1, 
                    If[
                    SuonaConNoi`Private`selectedNoteTutorial == 
                    SuonaConNoi`Private`joinNote[
                    SuonaConNoi`Private`note$, SuonaConNoi`Private`oct$], 
                    Lighter[Green], 
                    Lighter[
                    Part[
                    SuonaConNoi`Private`octaveColors, 
                    SuonaConNoi`Private`oct$], 0.9]], 2, White], 
                   Rectangle[{0, 0}, {1, 2}]}, {
                   Line[{{0, 2}, {0, 0}, {1, 0}, {1, 2}}]}, 
                  If[SuonaConNoi`Private`shownotes$$, 
                   Text[
                    Style[
                    StringJoin[SuonaConNoi`Private`note$, 
                    ToString[SuonaConNoi`Private`oct$]], 10, "Label"], {
                    0.5, 1}], {}]}, 
                 ImageSize -> {
                  22 SuonaConNoi`Private`scale, 41 SuonaConNoi`Private`scale},
                  PlotRange -> {{-0.01, 1.01}, {-0.05, 2}}, ImageMargins -> 
                 0], 
                EventHandler[
                 Dynamic[
                  Graphics[{{
                    EdgeForm[], 
                    Switch[0, 0, 
                    If[
                    SuonaConNoi`Private`selectedNoteLearn == 
                    SuonaConNoi`Private`joinNote[
                    SuonaConNoi`Private`note$, SuonaConNoi`Private`oct$], 
                    Lighter[Green], White], 1, 
                    If[
                    SuonaConNoi`Private`selectedNoteTutorial == 
                    SuonaConNoi`Private`joinNote[
                    SuonaConNoi`Private`note$, SuonaConNoi`Private`oct$], 
                    Lighter[Green], 
                    If[
                    And[
                    SuonaConNoi`Private`dwn, 
                    SuonaConNoi`Private`selectedNoteTutorial != "", 
                    SuonaConNoi`Private`selectedNoteTutorial != "END"], 
                    Lighter[Red], 
                    Lighter[
                    Part[
                    SuonaConNoi`Private`octaveColors, 
                    SuonaConNoi`Private`oct$], 0.9]]], 2, White], 
                    Rectangle[{0, 
                    If[SuonaConNoi`Private`dwn, 0.15, 0]}, {1, 2}]}, 
                    Line[{{0, 2}, {0, 
                    If[SuonaConNoi`Private`dwn, 0.15, 0]}, {1, 
                    If[SuonaConNoi`Private`dwn, 0.15, 0]}, {1, 2}}], 
                    If[SuonaConNoi`Private`shownotes$$, 
                    Text[
                    Style[
                    StringJoin[SuonaConNoi`Private`note$, 
                    ToString[SuonaConNoi`Private`oct$]], 
                    If[SuonaConNoi`Private`dwn, 9, 10], "Label"], {0.5, 
                    If[SuonaConNoi`Private`dwn, 1.1, 1]}], {}]}, 
                   ImageSize -> {
                    22 SuonaConNoi`Private`scale, 41 
                    SuonaConNoi`Private`scale}, 
                   PlotRange -> {{-0.01, 1.01}, {-0.05, 2}}, ImageMargins -> 
                   0]], {"MouseDown" :> (SuonaConNoi`Private`dwn = True; 
                   SuonaConNoi`Private`onKeyDown[
                    SuonaConNoi`Private`note$, SuonaConNoi`Private`oct$]), 
                  "MouseUp" :> (SuonaConNoi`Private`dwn = False; 
                   SuonaConNoi`Private`onKeyUp[
                    SuonaConNoi`Private`note$, SuonaConNoi`Private`oct$])}]]; 
             SuonaConNoi`Private`space[
                Pattern[SuonaConNoi`Private`wd, 
                 Blank[]]] := Graphics[{White, 
                 Rectangle[{0, 0}, {SuonaConNoi`Private`wd, 1}]}, 
                ImageSize -> {
                 SuonaConNoi`Private`wd SuonaConNoi`Private`scale, 10}, 
                PlotRange -> {{0, 0}, {2.5, 5}}, ImageMargins -> 0]; 
             SuonaConNoi`Private`vert := Graphics[
                Line[{{0, 0}, {0, 1}}], 
                PlotRange -> {{-0.001, 0.001}, {0, 1}}, 
                ImageSize -> {
                 2 SuonaConNoi`Private`scale, 60 SuonaConNoi`Private`scale}, 
                ImageMargins -> 0]; SuonaConNoi`Private`blackkey[
                Pattern[SuonaConNoi`Private`note$, 
                 Blank[]], 
                Pattern[SuonaConNoi`Private`oct$, 
                 Blank[]]] := Mouseover[
                Graphics[{{
                   EdgeForm[Black], 
                   Switch[0, 0, 
                    If[
                    SuonaConNoi`Private`selectedNoteLearn == 
                    SuonaConNoi`Private`joinNote[
                    SuonaConNoi`Private`note$, SuonaConNoi`Private`oct$], 
                    Darker[Green], Black], 1, 
                    If[
                    SuonaConNoi`Private`selectedNoteTutorial == 
                    SuonaConNoi`Private`joinNote[
                    SuonaConNoi`Private`note$, SuonaConNoi`Private`oct$], 
                    Darker[Green], Black], 2, Black], 
                   Rectangle[{0, 2.5}, {0.5, 5}]}, 
                  If[SuonaConNoi`Private`shownotes$$, 
                   Text[
                    Style[
                    StringJoin[SuonaConNoi`Private`note$, " ", 
                    ToString[SuonaConNoi`Private`oct$]], 10, White, 
                    "Label"], {0.25, 3.5}, {0, 0}, {0, 1}], {}]}, 
                 ImageSize -> {
                  12 SuonaConNoi`Private`scale, 60 SuonaConNoi`Private`scale},
                  PlotRange -> {{0, 0.5}, {2.5, 5}}, ImageMargins -> 0], 
                EventHandler[
                 Dynamic[
                  Graphics[{{
                    EdgeForm[Black], 
                    Switch[0, 0, 
                    If[
                    SuonaConNoi`Private`selectedNoteLearn == 
                    SuonaConNoi`Private`joinNote[
                    SuonaConNoi`Private`note$, SuonaConNoi`Private`oct$], 
                    Darker[Green], Black], 1, 
                    If[
                    SuonaConNoi`Private`selectedNoteTutorial == 
                    SuonaConNoi`Private`joinNote[
                    SuonaConNoi`Private`note$, SuonaConNoi`Private`oct$], 
                    Darker[Green], 
                    If[
                    And[
                    SuonaConNoi`Private`dwn, 
                    SuonaConNoi`Private`selectedNoteTutorial != "", 
                    SuonaConNoi`Private`selectedNoteTutorial != "END"], 
                    Darker[Red], Black]], 2, Black], 
                    Rectangle[{
                    If[SuonaConNoi`Private`dwn, 0.05, 0], 2.5}, {
                    If[SuonaConNoi`Private`dwn, 0.4, 0.5], 5}], 
                    If[SuonaConNoi`Private`shownotes$$, 
                    Text[
                    Style[
                    StringJoin[SuonaConNoi`Private`note$, " ", 
                    ToString[SuonaConNoi`Private`oct$]], 
                    If[SuonaConNoi`Private`dwn, 9, 10], White, "Label"], {
                    0.25, 3.5}, {0, 0}, {0, 1}], {}]}}, 
                   ImageSize -> {
                    12 SuonaConNoi`Private`scale, 60 
                    SuonaConNoi`Private`scale}, 
                   PlotRange -> {{0, 0.5}, {2.5, 5}}, ImageMargins -> 0]], {
                 "MouseDown" :> (SuonaConNoi`Private`dwn = True; 
                   SuonaConNoi`Private`onKeyDown[
                    SuonaConNoi`Private`note$, SuonaConNoi`Private`oct$]), 
                  "MouseUp" :> (SuonaConNoi`Private`dwn = False; 
                   SuonaConNoi`Private`onKeyUp[
                    SuonaConNoi`Private`note$, SuonaConNoi`Private`oct$])}]]; 
             SuonaConNoi`Private`whiteset[
                Pattern[SuonaConNoi`Private`oct, 
                 Blank[]]] := Grid[{
                 Flatten[
                  Map[
                  SuonaConNoi`Private`whitekey[#, 
                    SuonaConNoi`Private`oct]& , {
                   "C", "D", "E", "F", "G", "A", "B"}]]}, Spacings -> 0]; 
             SuonaConNoi`Private`blackset[
                Pattern[SuonaConNoi`Private`oct, 
                 Blank[]]] := Grid[{{SuonaConNoi`Private`vert, 
                  SuonaConNoi`Private`space[15], 
                  SuonaConNoi`Private`blackkey["C#", SuonaConNoi`Private`oct], 
                  SuonaConNoi`Private`space[10], 
                  SuonaConNoi`Private`blackkey["D#", SuonaConNoi`Private`oct], 
                  SuonaConNoi`Private`space[13], SuonaConNoi`Private`vert, 
                  SuonaConNoi`Private`vert, 
                  SuonaConNoi`Private`space[14], 
                  SuonaConNoi`Private`blackkey["F#", SuonaConNoi`Private`oct], 
                  SuonaConNoi`Private`space[10], 
                  SuonaConNoi`Private`blackkey["G#", SuonaConNoi`Private`oct], 
                  SuonaConNoi`Private`space[10], 
                  SuonaConNoi`Private`blackkey["A#", SuonaConNoi`Private`oct], 
                  SuonaConNoi`Private`space[14], SuonaConNoi`Private`vert}}, 
                Spacings -> 0, Alignment -> Left]; 
             SuonaConNoi`Private`keyboardsplit[
                Pattern[SuonaConNoi`Private`initOct, 
                 Blank[]], 
                Pattern[SuonaConNoi`Private`numOct, 
                 Blank[]]] := Grid[{
                 Flatten[
                  Table[
                   SuonaConNoi`Private`blackset[SuonaConNoi`Private`i], {
                   SuonaConNoi`Private`i, SuonaConNoi`Private`initOct, 
                    SuonaConNoi`Private`initOct + SuonaConNoi`Private`numOct - 
                    1}]], 
                 Flatten[
                  Table[
                   SuonaConNoi`Private`whiteset[SuonaConNoi`Private`i], {
                   SuonaConNoi`Private`i, SuonaConNoi`Private`initOct, 
                    SuonaConNoi`Private`initOct + SuonaConNoi`Private`numOct - 
                    1}]]}, Spacings -> {
                 "Columns" -> {{0}}, "Rows" -> {{-0.1}}}, 
                Alignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}]; 
             Deploy[
               SuonaConNoi`Private`keyboardsplit[
                Switch[
                0, 0, SuonaConNoi`Private`initOctLearn, 1, 
                 SuonaConNoi`Private`initOctTutorial, 2, 
                 SuonaConNoi`Private`initOctFree], 
                Switch[
                0, 0, SuonaConNoi`Private`numOctLearn, 1, 
                 SuonaConNoi`Private`numOctTutorial, 2, 
                 SuonaConNoi`Private`numOctFree]]]), 
            "Specifications" :> {{{
               SuonaConNoi`Private`shownotes$$, False, "Mostra note"}, {
               True, False}}}, 
            "Options" :> {
             TrackedSymbols :> {
               SuonaConNoi`Private`shownotes$$, 
                SuonaConNoi`Private`selectedNoteLearn, 
                SuonaConNoi`Private`selectedNoteTutorial, 
                SuonaConNoi`Private`initOctLearn, 
                SuonaConNoi`Private`initOctTutorial, 
                SuonaConNoi`Private`initOctFree, 
                SuonaConNoi`Private`numOctLearn, 
                SuonaConNoi`Private`numOctTutorial, 
                SuonaConNoi`Private`numOctFree}, LocalizeVariables -> False, 
              ContinuousAction -> False}, "DefaultOptions" :> {}],
           ImageSizeCache->{917., {181., 187.}},
           SingleEvaluation->True],
          Deinitialization:>None,
          DynamicModuleValues:>{},
          
          Initialization:>({SuonaConNoi`Private`dwn = False}; 
           Typeset`initDone$$ = True),
          SynchronousInitialization->True,
          UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
          UnsavedVariables:>{Typeset`initDone$$},
          UntrackedVariables:>{Typeset`size$$}], "Manipulate",
         Deployed->True,
         StripOnInput->False],
        Manipulate`InterpretManipulate[1]],
       DynamicModuleValues:>{}]},
     {
      DynamicBox[ToBoxes[
        If[
         And[
         SuonaConNoi`Private`selectedNoteLearn != "END", 
          SuonaConNoi`Private`noteLearnStarted], 
         Column[{
           Text[
            Style[
            "Inserisci la nota e clicca il bottone controlla", Black, Bold, 
             18]], 
           InputField[
            Dynamic[SuonaConNoi`Private`textField], String, BaseStyle -> 15, 
            FieldHint -> "Inserire la nota qui.."], 
           If[
           ToUpperCase[SuonaConNoi`Private`textField] == 
            SuonaConNoi`Private`baseNote[
             SuonaConNoi`Private`selectedNoteLearn], 
            Text[
             Style["OK, molto bene!", Green, Bold, 18]], 
            If[SuonaConNoi`Private`textField != "", 
             Text[
              Style["Nota non corretta", Red, Bold, 18]], 
             Text[
              Style["", Black, Bold, 18]]]]}, Center], 
         If[SuonaConNoi`Private`noteLearnStarted, 
          Column[{
            Text[
             Style["Hai finito, complimenti!", Green, Bold, 20]], 
            Text[
             Style[
              StringForm[
               StringJoin["Errori: ", 
                ToString[SuonaConNoi`Private`errorsLearn]]], 
              If[SuonaConNoi`Private`errorsLearn == 0, Green, Orange], Bold, 
              18]]}, Center], 
          Text[""]]], StandardForm],
       ImageSizeCache->{0., {3., 12.}}]},
     {
      DynamicBox[ToBoxes[
        If[
         And[
         SuonaConNoi`Private`selectedNoteLearn != "END", 
          SuonaConNoi`Private`noteLearnStarted], 
         Button["Avanti ", Pause[0.6]; If[
            And[
            SuonaConNoi`Private`textField != "", 
             ToUpperCase[SuonaConNoi`Private`textField] == 
             SuonaConNoi`Private`baseNote[
              SuonaConNoi`Private`selectedNoteLearn], 
             SuonaConNoi`Private`selectedNoteLearn != ""], 
            SuonaConNoi`Private`nextNoteLearn, 
            AddTo[SuonaConNoi`Private`errorsLearn, 1]; Null]; 
          SuonaConNoi`Private`textField = ""; Null, ImageSize -> {200, 50}, 
          Method -> "Queued", BaseStyle -> {"GenericButton", 16, Bold, 
            Darker[Orange]}, Background -> LightOrange], 
         Text[""]], StandardForm],
       ImageSizeCache->{0., {3., 12.}}]}
    },
    DefaultBaseStyle->"Column",
    GridBoxAlignment->{"Columns" -> {{Center}}},
    GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
   "Column"]]], "Output",
 CellChangeTimes->{
  3.830251167239719*^9, 3.8302514752505755`*^9, 3.830251598347453*^9, 
   3.83025164526749*^9, 3.8302518692903643`*^9, {3.8302520512533493`*^9, 
   3.830252071143467*^9}, {3.8302521348525376`*^9, 3.830252160141407*^9}, {
   3.830252194802884*^9, 3.8302522115534725`*^9}, 3.830252276464404*^9, 
   3.8302524826963596`*^9, {3.830252924009166*^9, 3.8302529333884416`*^9}, {
   3.8302530370569725`*^9, 3.830253059144434*^9}, {3.8302531948753586`*^9, 
   3.8302532660334225`*^9}, {3.830253335922207*^9, 3.8302533646639986`*^9}, 
   3.83025339860953*^9, {3.830253597680066*^9, 3.830253604057767*^9}, {
   3.8302536517743025`*^9, 3.8302536746158543`*^9}, 3.830253773135635*^9, 
   3.830253844728674*^9, {3.830253923025696*^9, 3.8302539399025826`*^9}, 
   3.8302540432686973`*^9, 3.830254116187945*^9, {3.8302542456019983`*^9, 
   3.8302542527980027`*^9}, {3.8302542969246287`*^9, 3.8302543104666414`*^9}, 
   3.830254378606664*^9, 3.830254426251652*^9, {3.830254554736349*^9, 
   3.830254577593524*^9}, 3.8302546382156086`*^9, 3.8302547963305693`*^9, 
   3.8302548603676195`*^9, 3.830255349476513*^9, 3.830255394026142*^9, 
   3.8302554305976877`*^9, 3.830255635657406*^9, 3.8302556703782454`*^9, {
   3.830255798872154*^9, 3.830255825592621*^9}, 3.830255902869638*^9, 
   3.8303986322998667`*^9, 3.8303997295612135`*^9, 3.8303998867673798`*^9, 
   3.830400172434232*^9, 3.8304003896620626`*^9, 3.830402511087723*^9, 
   3.8304025658753667`*^9, 3.83040354165632*^9, 3.8304036185970864`*^9, 
   3.8304037448770733`*^9, 3.8304038720055876`*^9, 3.8304040951815686`*^9, 
   3.8304041303371305`*^9, 3.830404397839311*^9, 3.8304045105834675`*^9, {
   3.8304045870135994`*^9, 3.8304045941203623`*^9}, {3.8304046260824723`*^9, 
   3.8304046365185623`*^9}, 3.83040467799559*^9, 3.83040498080425*^9, 
   3.8304052590990114`*^9, 3.830405318275265*^9, {3.8304057209555593`*^9, 
   3.8304057385998135`*^9}, 3.8304057745468*^9, 3.8304058276587286`*^9, 
   3.8304060816798353`*^9, 3.8304061938463364`*^9, 3.8304062426349916`*^9, 
   3.8304062919342427`*^9, 3.83040635834237*^9, 3.830406392391656*^9, 
   3.8304067626011467`*^9, 3.830406833818664*^9, 3.8304069049145546`*^9, 
   3.8304069840775895`*^9, {3.8304072072523594`*^9, 3.8304072390922017`*^9}, 
   3.8304073203019996`*^9, 3.83040831667435*^9, 3.8304084170324163`*^9, 
   3.8304085341248493`*^9, {3.8304085697529993`*^9, 3.830408597980145*^9}, 
   3.8304087114976273`*^9, 3.830408788031993*^9, 3.8304089764837613`*^9, 
   3.8304093707522583`*^9, 3.830409590684888*^9, 3.8304096275469217`*^9, 
   3.8304097429111896`*^9, {3.830409866348301*^9, 3.830409914898611*^9}, {
   3.8304099847488422`*^9, 3.830410015313676*^9}, {3.8304100524546657`*^9, 
   3.830410073642811*^9}, 3.8304103106836023`*^9, 3.8304104719414864`*^9, {
   3.830410519736557*^9, 3.830410527161838*^9}, 3.830410566203746*^9, 
   3.83041073954335*^9, 3.8304107748410897`*^9, 3.830410932093608*^9, 
   3.8304111464179087`*^9, 3.8304112018832707`*^9, 3.8304112517707376`*^9, 
   3.8304112907535005`*^9, 3.8304114410422664`*^9, 3.8304115081431837`*^9, 
   3.830411545978798*^9, 3.830411587767135*^9, 3.8304116838095317`*^9, {
   3.830411719493149*^9, 3.830411747834124*^9}, 3.830411836527216*^9, 
   3.8304119038106337`*^9, 3.8304120266968117`*^9, 3.830412073734059*^9, {
   3.830412108670167*^9, 3.830412137635239*^9}, 3.8304122875322847`*^9, 
   3.8304123393700047`*^9, 3.830412526551455*^9, 3.8304125853156915`*^9, 
   3.830412632023481*^9, {3.830412662594615*^9, 3.8304126940436044`*^9}, 
   3.830412802193198*^9, 3.830412891788718*^9, 3.8304131168139076`*^9, 
   3.830413179811301*^9, 3.830413298032436*^9, 3.83041339793264*^9, {
   3.8304135450931487`*^9, 3.8304135735586786`*^9}, 3.830413700292716*^9, 
   3.8304137876326528`*^9, 3.830413819490239*^9, 3.8304139072673283`*^9, 
   3.830413979369687*^9, 3.830420015644928*^9, 3.8304201252854567`*^9, 
   3.8304202663483105`*^9, 3.830420303229709*^9, 3.830420701256993*^9, 
   3.83042074490506*^9, 3.830421133302604*^9, 3.8304211961372166`*^9, 
   3.830421314760392*^9, 3.830421392931321*^9, 3.8304214379001102`*^9, 
   3.8304214827935977`*^9, 3.830421583137101*^9, 3.830421645635505*^9, 
   3.830421895047429*^9, 3.8304220826886415`*^9, {3.830422171779488*^9, 
   3.830422229240011*^9}, 3.8304223116561284`*^9, 3.830422418482127*^9, 
   3.8304231311413207`*^9, 3.8304232408052483`*^9, 3.8304233343281393`*^9, 
   3.8304233854715056`*^9, 3.8305740742360525`*^9, 3.8305743563656435`*^9, 
   3.8305745026177244`*^9, 3.830575386980491*^9, 3.8305760469794683`*^9, {
   3.8305910628471193`*^9, 3.830591073759613*^9}, 3.830591136509775*^9, 
   3.8305912354103336`*^9, 3.8305913128340054`*^9, 3.830591364625149*^9, 
   3.830591428422924*^9, 3.830591468875752*^9, 3.830591539446664*^9, 
   3.8305915841850047`*^9, 3.83059163429885*^9, 3.8305917543014264`*^9, 
   3.8305918127253056`*^9, 3.8305918474055176`*^9, 3.830591978432014*^9, 
   3.8305920343367558`*^9, 3.830592396080233*^9, 3.83059244829784*^9, 
   3.8305925832534246`*^9, 3.8305926822204027`*^9, 3.830592715858241*^9, 
   3.830592883390218*^9, 3.8305930019628844`*^9, 3.8305931221510696`*^9, 
   3.8305932174427195`*^9, 3.8305932867472296`*^9, 3.830593358503125*^9, 
   3.830593451964385*^9, {3.8305934880720997`*^9, 3.8305935160445595`*^9}, 
   3.830593633902584*^9, {3.830593786374091*^9, 3.830593808617627*^9}, 
   3.830593867545108*^9, 3.830594069346586*^9, 3.8305941114584603`*^9, 
   3.830594390797826*^9, 3.8305944449065638`*^9, 3.8305944775262566`*^9, 
   3.8305945689455037`*^9, 3.830594646005245*^9, 3.830594687487012*^9, 
   3.8305947528715553`*^9, 3.8305948191138563`*^9, 3.8305949119473257`*^9, 
   3.8305950310748386`*^9, 3.8305951201589727`*^9, 3.830595412551511*^9, 
   3.8305955049440994`*^9, {3.830598248510371*^9, 3.830598273767415*^9}, 
   3.8305986342377357`*^9},
 CellLabel->"Out[3]=",ExpressionUUID->"9ba9f496-1fd7-455b-a17a-32bcf398f8a9"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["PlaySong"], "Input",
 CellChangeTimes->{{3.830012477201371*^9, 3.8300124807289753`*^9}, {
   3.8302507270789733`*^9, 3.830250727244583*^9}, {3.830405264269734*^9, 
   3.8304052649167356`*^9}, 3.8304063949346566`*^9, {3.830409600858551*^9, 
   3.83040961069767*^9}, {3.8304096777067175`*^9, 3.830409680931452*^9}, 
   3.830410164180611*^9, 3.8304232623542*^9, 3.8305911223288417`*^9, {
   3.8305983178020105`*^9, 3.830598318232452*^9}},
 CellLabel->"In[4]:=",ExpressionUUID->"e332816b-b505-42fd-ad9e-1a33f929504f"],

Cell[BoxData[
 PanelBox[
  TagBox[GridBox[{
     {
      DynamicBox[ToBoxes[
        Text[
         Style[SuonaConNoi`Private`titleTutorial, Black, Bold, 24]], 
        StandardForm],
       ImageSizeCache->{312., {6., 23.}}]},
     {
      TemplateBox[{
        ButtonBox[
        "\"Genera casualmente \"", 
         ButtonFunction :> (
          SuonaConNoi`Private`filePath = Part[SuonaConNoi`Private`paths, 
             RandomInteger[{1, 
               Length[SuonaConNoi`Private`paths]}]]; 
          SuonaConNoi`Private`titleTutorial = 
           FileNameTake[SuonaConNoi`Private`filePath]; 
          SuonaConNoi`Private`midiNotesTutorial = 
           SuonaConNoi`GetNotesFromMidi[SuonaConNoi`Private`filePath]; 
          SuonaConNoi`Private`nextNoteTutorial; 
          SuonaConNoi`Private`playSongEnded = False), 
         ImageSize -> {200, Automatic}, Method -> "Queued", 
         BaseStyle -> {"GenericButton", 16, Bold, 
           RGBColor[
            Rational[2, 3], 0.33333333333333337`, 0]}, Background -> 
         RGBColor[1, 0.9, 0.8], Appearance -> Automatic, Evaluator -> 
         Automatic], 
        ButtonBox[
        "\"Seleziona file MIDI \"", 
         ButtonFunction :> (SuonaConNoi`Private`filePath = ToString[
             SystemDialogInput["FileOpen", ".mid"]]; 
          If[SuonaConNoi`Private`filePath != "$Canceled", 
            SuonaConNoi`Private`midiNotesTutorial = 
             SuonaConNoi`GetNotesFromMidi[SuonaConNoi`Private`filePath]; 
            SuonaConNoi`Private`titleTutorial = 
             FileNameTake[SuonaConNoi`Private`filePath]; 
            SuonaConNoi`Private`nextNoteTutorial; 
            SuonaConNoi`Private`playSongEnded = False]), 
         ImageSize -> {200, Automatic}, Method -> "Queued", 
         BaseStyle -> {"GenericButton", 16, Bold, 
           RGBColor[
            Rational[2, 3], 0.33333333333333337`, 0]}, Background -> 
         RGBColor[1, 0.9, 0.8], Appearance -> Automatic, Evaluator -> 
         Automatic]},
       "RowDefault"]},
     {
      DynamicBox[ToBoxes[
        If[
         And[
         SuonaConNoi`Private`selectedNoteTutorial != "END", 
          SuonaConNoi`Private`selectedNoteTutorial != ""], 
         Text[
          Style[
           StringJoin[
           "Nota corrente: ", SuonaConNoi`Private`selectedNoteTutorial], 
           Black, Bold, 20]], 
         Text[""]], StandardForm],
       ImageSizeCache->{185., {5., 19.}}]},
     {
      TemplateBox[{
        DynamicModuleBox[{SuonaConNoi`Private`shownotes$$ = False}, 
         TagBox[
          StyleBox[
           
           DynamicModuleBox[{
            Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
             Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
             Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
             Typeset`specs$$ = {{{
                 Hold[SuonaConNoi`Private`shownotes$$], False, 
                 "Mostra note"}, {True, False}}}, 
             Typeset`size$$ = {868., {138.5, 144.5}}, Typeset`update$$ = 0, 
             Typeset`initDone$$, Typeset`skipInitDone$$ = False}, 
            DynamicBox[
             Manipulate`ManipulateBoxes[
             1, StandardForm, 
              "Variables" :> {SuonaConNoi`Private`shownotes$$ = False}, 
              "ControllerVariables" :> {}, 
              "OtherVariables" :> {
               Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$,
                 Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
                Typeset`specs$$, Typeset`size$$, Typeset`update$$, 
                Typeset`initDone$$, Typeset`skipInitDone$$}, 
              "Body" :> (SuonaConNoi`Private`whitekey[
                  Pattern[SuonaConNoi`Private`note$, 
                   Blank[]], 
                  Pattern[SuonaConNoi`Private`oct$, 
                   Blank[]]] := Mouseover[
                  Graphics[{{
                    EdgeForm[], 
                    Switch[1, 0, 
                    If[
                    SuonaConNoi`Private`selectedNoteLearn == 
                    SuonaConNoi`Private`joinNote[
                    SuonaConNoi`Private`note$, SuonaConNoi`Private`oct$], 
                    Lighter[Green], White], 1, 
                    If[
                    SuonaConNoi`Private`selectedNoteTutorial == 
                    SuonaConNoi`Private`joinNote[
                    SuonaConNoi`Private`note$, SuonaConNoi`Private`oct$], 
                    Lighter[Green], 
                    Lighter[
                    Part[
                    SuonaConNoi`Private`octaveColors, 
                    SuonaConNoi`Private`oct$], 0.9]], 2, White], 
                    Rectangle[{0, 0}, {1, 2}]}, {
                    Line[{{0, 2}, {0, 0}, {1, 0}, {1, 2}}]}, 
                    If[SuonaConNoi`Private`shownotes$$, 
                    Text[
                    Style[
                    StringJoin[SuonaConNoi`Private`note$, 
                    ToString[SuonaConNoi`Private`oct$]], 10, "Label"], {
                    0.5, 1}], {}]}, 
                   ImageSize -> {
                    22 SuonaConNoi`Private`scale, 41 
                    SuonaConNoi`Private`scale}, 
                   PlotRange -> {{-0.01, 1.01}, {-0.05, 2}}, ImageMargins -> 
                   0], 
                  EventHandler[
                   Dynamic[
                    Graphics[{{
                    EdgeForm[], 
                    Switch[1, 0, 
                    If[
                    SuonaConNoi`Private`selectedNoteLearn == 
                    SuonaConNoi`Private`joinNote[
                    SuonaConNoi`Private`note$, SuonaConNoi`Private`oct$], 
                    Lighter[Green], White], 1, 
                    If[
                    SuonaConNoi`Private`selectedNoteTutorial == 
                    SuonaConNoi`Private`joinNote[
                    SuonaConNoi`Private`note$, SuonaConNoi`Private`oct$], 
                    Lighter[Green], 
                    If[
                    And[
                    SuonaConNoi`Private`dwn, 
                    SuonaConNoi`Private`selectedNoteTutorial != "", 
                    SuonaConNoi`Private`selectedNoteTutorial != "END"], 
                    Lighter[Red], 
                    Lighter[
                    Part[
                    SuonaConNoi`Private`octaveColors, 
                    SuonaConNoi`Private`oct$], 0.9]]], 2, White], 
                    Rectangle[{0, 
                    If[SuonaConNoi`Private`dwn, 0.15, 0]}, {1, 2}]}, 
                    Line[{{0, 2}, {0, 
                    If[SuonaConNoi`Private`dwn, 0.15, 0]}, {1, 
                    If[SuonaConNoi`Private`dwn, 0.15, 0]}, {1, 2}}], 
                    If[SuonaConNoi`Private`shownotes$$, 
                    Text[
                    Style[
                    StringJoin[SuonaConNoi`Private`note$, 
                    ToString[SuonaConNoi`Private`oct$]], 
                    If[SuonaConNoi`Private`dwn, 9, 10], "Label"], {0.5, 
                    If[SuonaConNoi`Private`dwn, 1.1, 1]}], {}]}, 
                    ImageSize -> {
                    22 SuonaConNoi`Private`scale, 41 
                    SuonaConNoi`Private`scale}, 
                    PlotRange -> {{-0.01, 1.01}, {-0.05, 2}}, ImageMargins -> 
                    0]], {"MouseDown" :> (SuonaConNoi`Private`dwn = True; 
                    SuonaConNoi`Private`onKeyDown[
                    SuonaConNoi`Private`note$, SuonaConNoi`Private`oct$]), 
                    "MouseUp" :> (SuonaConNoi`Private`dwn = False; 
                    SuonaConNoi`Private`onKeyUp[
                    SuonaConNoi`Private`note$, SuonaConNoi`Private`oct$])}]]; 
               SuonaConNoi`Private`space[
                  Pattern[SuonaConNoi`Private`wd, 
                   Blank[]]] := Graphics[{White, 
                   Rectangle[{0, 0}, {SuonaConNoi`Private`wd, 1}]}, 
                  ImageSize -> {
                   SuonaConNoi`Private`wd SuonaConNoi`Private`scale, 10}, 
                  PlotRange -> {{0, 0}, {2.5, 5}}, ImageMargins -> 0]; 
               SuonaConNoi`Private`vert := Graphics[
                  Line[{{0, 0}, {0, 1}}], 
                  PlotRange -> {{-0.001, 0.001}, {0, 1}}, 
                  ImageSize -> {
                   2 SuonaConNoi`Private`scale, 60 SuonaConNoi`Private`scale},
                   ImageMargins -> 0]; SuonaConNoi`Private`blackkey[
                  Pattern[SuonaConNoi`Private`note$, 
                   Blank[]], 
                  Pattern[SuonaConNoi`Private`oct$, 
                   Blank[]]] := Mouseover[
                  Graphics[{{
                    EdgeForm[Black], 
                    Switch[1, 0, 
                    If[
                    SuonaConNoi`Private`selectedNoteLearn == 
                    SuonaConNoi`Private`joinNote[
                    SuonaConNoi`Private`note$, SuonaConNoi`Private`oct$], 
                    Darker[Green], Black], 1, 
                    If[
                    SuonaConNoi`Private`selectedNoteTutorial == 
                    SuonaConNoi`Private`joinNote[
                    SuonaConNoi`Private`note$, SuonaConNoi`Private`oct$], 
                    Darker[Green], Black], 2, Black], 
                    Rectangle[{0, 2.5}, {0.5, 5}]}, 
                    If[SuonaConNoi`Private`shownotes$$, 
                    Text[
                    Style[
                    StringJoin[SuonaConNoi`Private`note$, " ", 
                    ToString[SuonaConNoi`Private`oct$]], 10, White, 
                    "Label"], {0.25, 3.5}, {0, 0}, {0, 1}], {}]}, 
                   ImageSize -> {
                    12 SuonaConNoi`Private`scale, 60 
                    SuonaConNoi`Private`scale}, 
                   PlotRange -> {{0, 0.5}, {2.5, 5}}, ImageMargins -> 0], 
                  EventHandler[
                   Dynamic[
                    Graphics[{{
                    EdgeForm[Black], 
                    Switch[1, 0, 
                    If[
                    SuonaConNoi`Private`selectedNoteLearn == 
                    SuonaConNoi`Private`joinNote[
                    SuonaConNoi`Private`note$, SuonaConNoi`Private`oct$], 
                    Darker[Green], Black], 1, 
                    If[
                    SuonaConNoi`Private`selectedNoteTutorial == 
                    SuonaConNoi`Private`joinNote[
                    SuonaConNoi`Private`note$, SuonaConNoi`Private`oct$], 
                    Darker[Green], 
                    If[
                    And[
                    SuonaConNoi`Private`dwn, 
                    SuonaConNoi`Private`selectedNoteTutorial != "", 
                    SuonaConNoi`Private`selectedNoteTutorial != "END"], 
                    Darker[Red], Black]], 2, Black], 
                    Rectangle[{
                    If[SuonaConNoi`Private`dwn, 0.05, 0], 2.5}, {
                    If[SuonaConNoi`Private`dwn, 0.4, 0.5], 5}], 
                    If[SuonaConNoi`Private`shownotes$$, 
                    Text[
                    Style[
                    StringJoin[SuonaConNoi`Private`note$, " ", 
                    ToString[SuonaConNoi`Private`oct$]], 
                    If[SuonaConNoi`Private`dwn, 9, 10], White, "Label"], {
                    0.25, 3.5}, {0, 0}, {0, 1}], {}]}}, 
                    ImageSize -> {
                    12 SuonaConNoi`Private`scale, 60 
                    SuonaConNoi`Private`scale}, 
                    PlotRange -> {{0, 0.5}, {2.5, 5}}, ImageMargins -> 0]], {
                   "MouseDown" :> (SuonaConNoi`Private`dwn = True; 
                    SuonaConNoi`Private`onKeyDown[
                    SuonaConNoi`Private`note$, SuonaConNoi`Private`oct$]), 
                    "MouseUp" :> (SuonaConNoi`Private`dwn = False; 
                    SuonaConNoi`Private`onKeyUp[
                    SuonaConNoi`Private`note$, SuonaConNoi`Private`oct$])}]]; 
               SuonaConNoi`Private`whiteset[
                  Pattern[SuonaConNoi`Private`oct, 
                   Blank[]]] := Grid[{
                   Flatten[
                    Map[
                    SuonaConNoi`Private`whitekey[#, 
                    SuonaConNoi`Private`oct]& , {
                    "C", "D", "E", "F", "G", "A", "B"}]]}, Spacings -> 0]; 
               SuonaConNoi`Private`blackset[
                  Pattern[SuonaConNoi`Private`oct, 
                   Blank[]]] := Grid[{{SuonaConNoi`Private`vert, 
                    SuonaConNoi`Private`space[15], 
                    SuonaConNoi`Private`blackkey[
                    "C#", SuonaConNoi`Private`oct], 
                    SuonaConNoi`Private`space[10], 
                    SuonaConNoi`Private`blackkey[
                    "D#", SuonaConNoi`Private`oct], 
                    SuonaConNoi`Private`space[13], SuonaConNoi`Private`vert, 
                    SuonaConNoi`Private`vert, 
                    SuonaConNoi`Private`space[14], 
                    SuonaConNoi`Private`blackkey[
                    "F#", SuonaConNoi`Private`oct], 
                    SuonaConNoi`Private`space[10], 
                    SuonaConNoi`Private`blackkey[
                    "G#", SuonaConNoi`Private`oct], 
                    SuonaConNoi`Private`space[10], 
                    SuonaConNoi`Private`blackkey[
                    "A#", SuonaConNoi`Private`oct], 
                    SuonaConNoi`Private`space[14], SuonaConNoi`Private`vert}},
                   Spacings -> 0, Alignment -> Left]; 
               SuonaConNoi`Private`keyboardsplit[
                  Pattern[SuonaConNoi`Private`initOct, 
                   Blank[]], 
                  Pattern[SuonaConNoi`Private`numOct, 
                   Blank[]]] := Grid[{
                   Flatten[
                    Table[
                    SuonaConNoi`Private`blackset[SuonaConNoi`Private`i], {
                    SuonaConNoi`Private`i, SuonaConNoi`Private`initOct, 
                    SuonaConNoi`Private`initOct + SuonaConNoi`Private`numOct - 
                    1}]], 
                   Flatten[
                    Table[
                    SuonaConNoi`Private`whiteset[SuonaConNoi`Private`i], {
                    SuonaConNoi`Private`i, SuonaConNoi`Private`initOct, 
                    SuonaConNoi`Private`initOct + SuonaConNoi`Private`numOct - 
                    1}]]}, Spacings -> {
                   "Columns" -> {{0}}, "Rows" -> {{-0.1}}}, 
                  Alignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}]; 
               Deploy[
                 SuonaConNoi`Private`keyboardsplit[
                  Switch[
                  1, 0, SuonaConNoi`Private`initOctLearn, 1, 
                   SuonaConNoi`Private`initOctTutorial, 2, 
                   SuonaConNoi`Private`initOctFree], 
                  Switch[
                  1, 0, SuonaConNoi`Private`numOctLearn, 1, 
                   SuonaConNoi`Private`numOctTutorial, 2, 
                   SuonaConNoi`Private`numOctFree]]]), 
              "Specifications" :> {{{
                 SuonaConNoi`Private`shownotes$$, False, "Mostra note"}, {
                 True, False}}}, 
              "Options" :> {
               TrackedSymbols :> {
                 SuonaConNoi`Private`shownotes$$, 
                  SuonaConNoi`Private`selectedNoteLearn, 
                  SuonaConNoi`Private`selectedNoteTutorial, 
                  SuonaConNoi`Private`initOctLearn, 
                  SuonaConNoi`Private`initOctTutorial, 
                  SuonaConNoi`Private`initOctFree, 
                  SuonaConNoi`Private`numOctLearn, 
                  SuonaConNoi`Private`numOctTutorial, 
                  SuonaConNoi`Private`numOctFree}, LocalizeVariables -> False,
                 ContinuousAction -> False}, "DefaultOptions" :> {}], 
             ImageSizeCache -> {917., {181., 187.}}, SingleEvaluation -> 
             True], Deinitialization :> None, DynamicModuleValues :> {}, 
            Initialization :> ({SuonaConNoi`Private`dwn = False}; 
             Typeset`initDone$$ = True), SynchronousInitialization -> True, 
            UndoTrackedVariables :> {Typeset`show$$, Typeset`bookmarkMode$$}, 
            UnsavedVariables :> {Typeset`initDone$$}, 
            UntrackedVariables :> {Typeset`size$$}], "Manipulate", Deployed -> 
           True, StripOnInput -> False], 
          Manipulate`InterpretManipulate[1]], DynamicModuleValues :> {}], 
        TemplateBox[{
         "\"oct1\"", "\"oct2\"", "\"oct3\"", "\"oct4\"", "\"oct5\"", 
          "\"oct6\"", "\"oct7\"", "\"oct8\""}, "SwatchLegend", 
         DisplayFunction -> (StyleBox[
           StyleBox[
            PaneBox[
             TagBox[
              GridBox[{{
                 TagBox[
                  GridBox[{{
                    GraphicsBox[{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[1, 0.5, 0]], 
                    RectangleBox[{0, 0}, {10, 10}, "RoundingRadius" -> 0]}, 
                    AspectRatio -> Full, ImageSize -> {10, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                    GraphicsBox[{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0, 0, 1]], 
                    RectangleBox[{0, 0}, {10, 10}, "RoundingRadius" -> 0]}, 
                    AspectRatio -> Full, ImageSize -> {10, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}, {
                    GraphicsBox[{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[1, 1, 0]], 
                    RectangleBox[{0, 0}, {10, 10}, "RoundingRadius" -> 0]}, 
                    AspectRatio -> Full, ImageSize -> {10, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #3}, {
                    GraphicsBox[{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[1, 0, 1]], 
                    RectangleBox[{0, 0}, {10, 10}, "RoundingRadius" -> 0]}, 
                    AspectRatio -> Full, ImageSize -> {10, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #4}, {
                    GraphicsBox[{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0, 1, 0]], 
                    RectangleBox[{0, 0}, {10, 10}, "RoundingRadius" -> 0]}, 
                    AspectRatio -> Full, ImageSize -> {10, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #5}, {
                    GraphicsBox[{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0, 1, 1]], 
                    RectangleBox[{0, 0}, {10, 10}, "RoundingRadius" -> 0]}, 
                    AspectRatio -> Full, ImageSize -> {10, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #6}, {
                    GraphicsBox[{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.6, 0.4, 0.2]], 
                    RectangleBox[{0, 0}, {10, 10}, "RoundingRadius" -> 0]}, 
                    AspectRatio -> Full, ImageSize -> {10, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #7}, {
                    GraphicsBox[{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    GrayLevel[0.5]], 
                    RectangleBox[{0, 0}, {10, 10}, "RoundingRadius" -> 0]}, 
                    AspectRatio -> Full, ImageSize -> {10, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #8}}, 
                   GridBoxAlignment -> {
                    "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                   AutoDelete -> False, 
                   GridBoxDividers -> {
                    "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                   GridBoxItemSize -> {
                    "Columns" -> {{All}}, "Rows" -> {{All}}}, 
                   GridBoxSpacings -> {
                    "Columns" -> {{0.3}}, "Rows" -> {{0.5}}}], "Grid"]}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}},
                AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
              "Grid"], Alignment -> Left, AppearanceElements -> None, 
             ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
             "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
           FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
           False]& ), InterpretationFunction :> (RowBox[{"SwatchLegend", "[", 
            RowBox[{
              RowBox[{"{", 
                RowBox[{
                  InterpretationBox[
                   ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[1, 0.5, 0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[0.6666666666666666, 0.33333333333333337`, 0.], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"1", ",", "0.5`", ",", "0"}], "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[1, 0.5, 0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                   RGBColor[1, 0.5, 0], Editable -> False, Selectable -> 
                   False], ",", 
                  InterpretationBox[
                   ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0, 0, 1], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> RGBColor[0., 0., 0.6666666666666666], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0", ",", "0", ",", "1"}], "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0, 0, 1]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                   RGBColor[0, 0, 1], Editable -> False, Selectable -> False],
                   ",", 
                  InterpretationBox[
                   ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[1, 1, 0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[0.6666666666666666, 0.6666666666666666, 0.], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"1", ",", "1", ",", "0"}], "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[1, 1, 0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                   RGBColor[1, 1, 0], Editable -> False, Selectable -> False],
                   ",", 
                  InterpretationBox[
                   ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[1, 0, 1], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[0.6666666666666666, 0., 0.6666666666666666], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"1", ",", "0", ",", "1"}], "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[1, 0, 1]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                   RGBColor[1, 0, 1], Editable -> False, Selectable -> False],
                   ",", 
                  InterpretationBox[
                   ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0, 1, 0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> RGBColor[0., 0.6666666666666666, 0.], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0", ",", "1", ",", "0"}], "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0, 1, 0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                   RGBColor[0, 1, 0], Editable -> False, Selectable -> False],
                   ",", 
                  InterpretationBox[
                   ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0, 1, 1], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[0., 0.6666666666666666, 0.6666666666666666], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0", ",", "1", ",", "1"}], "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0, 1, 1]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                   RGBColor[0, 1, 1], Editable -> False, Selectable -> False],
                   ",", 
                  InterpretationBox[
                   ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.6, 0.4, 0.2], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[0.4, 0.2666666666666667, 0.13333333333333336`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.6`", ",", "0.4`", ",", "0.2`"}], "]"}], 
                    NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.6, 0.4, 0.2]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                   RGBColor[0.6, 0.4, 0.2], Editable -> False, Selectable -> 
                   False], ",", 
                  InterpretationBox[
                   ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                   GrayLevel[0.5], Editable -> False, Selectable -> False]}], 
                "}"}], ",", 
              RowBox[{"{", 
                
                RowBox[{#, ",", #2, ",", #3, ",", #4, ",", #5, ",", #6, 
                  ",", #7, ",", #8}], "}"}]}], "]"}]& ), Editable -> True]},
       "RowDefault"]},
     {
      DynamicBox[ToBoxes[
        If[SuonaConNoi`Private`playSongEnded, 
         Text[
          Style["Bravo!", Green, Bold, 20]], 
         Text[""]], StandardForm],
       ImageSizeCache->{0., {3., 12.}}]}
    },
    DefaultBaseStyle->"Column",
    GridBoxAlignment->{"Columns" -> {{Center}}},
    GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
   "Column"]]], "Output",
 CellChangeTimes->{
  3.830013091510784*^9, {3.8300135459123573`*^9, 3.8300135692232423`*^9}, {
   3.830013656453644*^9, 3.830013679288993*^9}, 3.83001371713113*^9, 
   3.8300138434844775`*^9, 3.8300143359303093`*^9, {3.8300144081125717`*^9, 
   3.8300144130332613`*^9}, 3.8302505777585196`*^9, 3.830250684708674*^9, {
   3.8302507235852404`*^9, 3.830250736930557*^9}, {3.830250788253628*^9, 
   3.8302507909452143`*^9}, 3.830251043287389*^9, 3.8302510947243676`*^9, 
   3.8302544515478354`*^9, 3.830254612542695*^9, 3.8302548005007043`*^9, {
   3.8302548703806343`*^9, 3.830254876370882*^9}, {3.830255353078416*^9, 
   3.830255376768581*^9}, {3.8302554344386377`*^9, 3.830255447096757*^9}, {
   3.830255906636839*^9, 3.8302559119584017`*^9}, 3.830398652559671*^9, 
   3.8304035455546417`*^9, 3.8304037674788184`*^9, 3.8304038751548605`*^9, 
   3.830404097293569*^9, 3.8304041483139515`*^9, 3.830404403027111*^9, 
   3.8304045137112846`*^9, 3.830404640259217*^9, 3.8304046810295877`*^9, 
   3.8304050637702913`*^9, 3.8304052664830384`*^9, 3.8304053216716185`*^9, {
   3.8304057229463997`*^9, 3.8304057416218977`*^9}, 3.8304057767720737`*^9, 
   3.830406150991397*^9, 3.8304063605199337`*^9, 3.830406397990528*^9, {
   3.8304069278685646`*^9, 3.8304070019248543`*^9}, 3.8304093738392706`*^9, 
   3.830409491684568*^9, {3.8304095946948576`*^9, 3.830409627981924*^9}, 
   3.8304096817942047`*^9, {3.830409743341189*^9, 3.830409764131077*^9}, {
   3.830409874590806*^9, 3.830409889079251*^9}, 3.830410146366254*^9, {
   3.830410506225632*^9, 3.8304105275908756`*^9}, 3.8304105691700263`*^9, 
   3.8304107423713517`*^9, {3.830410775557061*^9, 3.830410805259694*^9}, 
   3.8304109390756083`*^9, 3.830411149216394*^9, 3.8304112090059366`*^9, {
   3.8304112524467382`*^9, 3.830411260846509*^9}, {3.83041129144147*^9, 
   3.8304113259220085`*^9}, 3.830411441657267*^9, 3.8304114778246536`*^9, 
   3.830411511415287*^9, 3.830411549970208*^9, 3.830411588436138*^9, 
   3.8304116844880285`*^9, {3.8304117201874557`*^9, 3.8304117721834226`*^9}, 
   3.8304118372623234`*^9, 3.8304119069007177`*^9, {3.8304120274068127`*^9, 
   3.830412036302992*^9}, 3.83041207942298*^9, {3.830412112898852*^9, 
   3.8304121383123627`*^9}, {3.8304122883092813`*^9, 3.830412306143752*^9}, {
   3.830412340094762*^9, 3.8304123542645874`*^9}, 3.830412530783439*^9, 
   3.830412589364724*^9, 3.8304126367620754`*^9, 3.8304126947666035`*^9, 
   3.83041289238472*^9, 3.830413117479909*^9, {3.8304131805112996`*^9, 
   3.830413190322138*^9}, 3.830413300693858*^9, 3.830413400636266*^9, {
   3.830413548201518*^9, 3.83041357417723*^9}, 3.830413700733715*^9, 
   3.830413788330676*^9, 3.830413819954237*^9, 3.830413856619445*^9, {
   3.830413907907404*^9, 3.8304139244886894`*^9}, 3.830413980022723*^9, 
   3.8304200163100696`*^9, 3.8304201258994513`*^9, 3.830420266585308*^9, 
   3.8304203037537084`*^9, 3.830420701685995*^9, 3.8304207452880583`*^9, {
   3.8304211339597797`*^9, 3.8304211513463182`*^9}, {3.8304211967612114`*^9, 
   3.8304212195248847`*^9}, 3.8304213181883936`*^9, {3.830421397824406*^9, 
   3.830421441827153*^9}, 3.830421483413226*^9, 3.8304215837628045`*^9, 
   3.830421646313504*^9, 3.8304218955253973`*^9, 3.830422083308641*^9, 
   3.8304221721944866`*^9, {3.8304222022846184`*^9, 3.83042222967901*^9}, 
   3.830422312050129*^9, 3.830422419110159*^9, 3.8304231318093204`*^9, {
   3.830423241566247*^9, 3.8304232655756598`*^9}, 3.8304233368291693`*^9, 
   3.830423389499343*^9, 3.8305740748990526`*^9, 3.8305743570666437`*^9, 
   3.8305745065431123`*^9, 3.8305753877114906`*^9, 3.8305760476554685`*^9, 
   3.8305910765685596`*^9, {3.8305911248096437`*^9, 3.830591139600775*^9}, 
   3.8305912384317975`*^9, 3.8305913158108253`*^9, 3.830591367248187*^9, 
   3.8305914318217144`*^9, 3.8305914721027627`*^9, 3.8305915421051207`*^9, 
   3.8305915877780323`*^9, 3.8305916365285172`*^9, 3.8305917565683794`*^9, {
   3.8305918103735723`*^9, 3.8305918158043036`*^9}, 3.8305918497217484`*^9, 
   3.8305919807533493`*^9, 3.830592036946757*^9, 3.8305923990681686`*^9, 
   3.830592452799974*^9, {3.830592586438573*^9, 3.8305926316185293`*^9}, 
   3.830592684564803*^9, 3.830592719618784*^9, 3.8305930059071407`*^9, 
   3.8305931301201134`*^9, 3.8305932181847897`*^9, {3.8305934914570885`*^9, 
   3.830593518439559*^9}, 3.8305936634006157`*^9, {3.8305937872016063`*^9, 
   3.8305938116674848`*^9}, {3.8305938761907625`*^9, 3.8305938828232045`*^9}, 
   3.830594071788477*^9, 3.8305941145270743`*^9, 3.8305943932432165`*^9, 
   3.8305944481855636`*^9, 3.8305944800327272`*^9, 3.830594569468503*^9, 
   3.8305946485622463`*^9, 3.8305946894710884`*^9, 3.830594755470763*^9, 
   3.8305948225031714`*^9, 3.8305949145113277`*^9, 3.830595033701704*^9, 
   3.830595120739971*^9, 3.830595413330512*^9, 3.8305955077997775`*^9, {
   3.830598252369088*^9, 3.830598274255415*^9}, 3.830598319496518*^9, 
   3.83059863707651*^9},
 CellLabel->"Out[4]=",ExpressionUUID->"5ea615a5-0231-41c2-acf0-d6b5e0f823f9"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["PlayFree"], "Input",
 CellChangeTimes->{{3.830409463052528*^9, 3.83040947968933*^9}, {
  3.830421378732337*^9, 3.83042137936736*^9}, {3.8305986682667637`*^9, 
  3.8305986763905687`*^9}},
 CellLabel->"In[5]:=",ExpressionUUID->"935eea3e-d62c-4977-a0ab-20040a23bb46"],

Cell[BoxData[
 DynamicModuleBox[{SuonaConNoi`Private`shownotes$$ = False}, 
  TagBox[
   StyleBox[
    DynamicModuleBox[{Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
     Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, Typeset`animvar$$ = 
     1, Typeset`name$$ = "\"untitled\"", Typeset`specs$$ = {{{
        Hold[SuonaConNoi`Private`shownotes$$], False, "Mostra note"}, {
       True, False}}}, Typeset`size$$ = {868., {138.5, 144.5}}, 
     Typeset`update$$ = 0, Typeset`initDone$$, Typeset`skipInitDone$$ = 
     False}, 
     DynamicBox[Manipulate`ManipulateBoxes[
      1, StandardForm, 
       "Variables" :> {SuonaConNoi`Private`shownotes$$ = False}, 
       "ControllerVariables" :> {}, 
       "OtherVariables" :> {
        Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
         Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
         Typeset`specs$$, Typeset`size$$, Typeset`update$$, 
         Typeset`initDone$$, Typeset`skipInitDone$$}, 
       "Body" :> (SuonaConNoi`Private`whitekey[
           Pattern[SuonaConNoi`Private`note$, 
            Blank[]], 
           Pattern[SuonaConNoi`Private`oct$, 
            Blank[]]] := Mouseover[
           Graphics[{{
              EdgeForm[], 
              Switch[2, 0, 
               If[
               SuonaConNoi`Private`selectedNoteLearn == 
                SuonaConNoi`Private`joinNote[
                 SuonaConNoi`Private`note$, SuonaConNoi`Private`oct$], 
                Lighter[Green], White], 1, 
               If[
               SuonaConNoi`Private`selectedNoteTutorial == 
                SuonaConNoi`Private`joinNote[
                 SuonaConNoi`Private`note$, SuonaConNoi`Private`oct$], 
                Lighter[Green], 
                Lighter[
                 Part[
                 SuonaConNoi`Private`octaveColors, SuonaConNoi`Private`oct$], 
                 0.9]], 2, White], 
              Rectangle[{0, 0}, {1, 2}]}, {
              Line[{{0, 2}, {0, 0}, {1, 0}, {1, 2}}]}, 
             If[SuonaConNoi`Private`shownotes$$, 
              Text[
               Style[
                StringJoin[SuonaConNoi`Private`note$, 
                 ToString[SuonaConNoi`Private`oct$]], 10, "Label"], {
               0.5, 1}], {}]}, 
            ImageSize -> {
             22 SuonaConNoi`Private`scale, 41 SuonaConNoi`Private`scale}, 
            PlotRange -> {{-0.01, 1.01}, {-0.05, 2}}, ImageMargins -> 0], 
           EventHandler[
            Dynamic[
             Graphics[{{
                EdgeForm[], 
                Switch[2, 0, 
                 If[
                 SuonaConNoi`Private`selectedNoteLearn == 
                  SuonaConNoi`Private`joinNote[
                   SuonaConNoi`Private`note$, SuonaConNoi`Private`oct$], 
                  Lighter[Green], White], 1, 
                 If[
                 SuonaConNoi`Private`selectedNoteTutorial == 
                  SuonaConNoi`Private`joinNote[
                   SuonaConNoi`Private`note$, SuonaConNoi`Private`oct$], 
                  Lighter[Green], 
                  If[
                   And[
                   SuonaConNoi`Private`dwn, 
                    SuonaConNoi`Private`selectedNoteTutorial != "", 
                    SuonaConNoi`Private`selectedNoteTutorial != "END"], 
                   Lighter[Red], 
                   Lighter[
                    Part[
                    SuonaConNoi`Private`octaveColors, 
                    SuonaConNoi`Private`oct$], 0.9]]], 2, White], 
                Rectangle[{0, 
                  If[SuonaConNoi`Private`dwn, 0.15, 0]}, {1, 2}]}, 
               Line[{{0, 2}, {0, 
                  If[SuonaConNoi`Private`dwn, 0.15, 0]}, {1, 
                  If[SuonaConNoi`Private`dwn, 0.15, 0]}, {1, 2}}], 
               If[SuonaConNoi`Private`shownotes$$, 
                Text[
                 Style[
                  StringJoin[SuonaConNoi`Private`note$, 
                   ToString[SuonaConNoi`Private`oct$]], 
                  If[SuonaConNoi`Private`dwn, 9, 10], "Label"], {0.5, 
                  If[SuonaConNoi`Private`dwn, 1.1, 1]}], {}]}, 
              ImageSize -> {
               22 SuonaConNoi`Private`scale, 41 SuonaConNoi`Private`scale}, 
              PlotRange -> {{-0.01, 1.01}, {-0.05, 2}}, ImageMargins -> 0]], {
            "MouseDown" :> (SuonaConNoi`Private`dwn = True; 
              SuonaConNoi`Private`onKeyDown[
               SuonaConNoi`Private`note$, SuonaConNoi`Private`oct$]), 
             "MouseUp" :> (SuonaConNoi`Private`dwn = False; 
              SuonaConNoi`Private`onKeyUp[
               SuonaConNoi`Private`note$, SuonaConNoi`Private`oct$])}]]; 
        SuonaConNoi`Private`space[
           Pattern[SuonaConNoi`Private`wd, 
            Blank[]]] := Graphics[{White, 
            Rectangle[{0, 0}, {SuonaConNoi`Private`wd, 1}]}, 
           ImageSize -> {
            SuonaConNoi`Private`wd SuonaConNoi`Private`scale, 10}, 
           PlotRange -> {{0, 0}, {2.5, 5}}, ImageMargins -> 0]; 
        SuonaConNoi`Private`vert := Graphics[
           Line[{{0, 0}, {0, 1}}], PlotRange -> {{-0.001, 0.001}, {0, 1}}, 
           ImageSize -> {
            2 SuonaConNoi`Private`scale, 60 SuonaConNoi`Private`scale}, 
           ImageMargins -> 0]; SuonaConNoi`Private`blackkey[
           Pattern[SuonaConNoi`Private`note$, 
            Blank[]], 
           Pattern[SuonaConNoi`Private`oct$, 
            Blank[]]] := Mouseover[
           Graphics[{{
              EdgeForm[Black], 
              Switch[2, 0, 
               If[
               SuonaConNoi`Private`selectedNoteLearn == 
                SuonaConNoi`Private`joinNote[
                 SuonaConNoi`Private`note$, SuonaConNoi`Private`oct$], 
                Darker[Green], Black], 1, 
               If[
               SuonaConNoi`Private`selectedNoteTutorial == 
                SuonaConNoi`Private`joinNote[
                 SuonaConNoi`Private`note$, SuonaConNoi`Private`oct$], 
                Darker[Green], Black], 2, Black], 
              Rectangle[{0, 2.5}, {0.5, 5}]}, 
             If[SuonaConNoi`Private`shownotes$$, 
              Text[
               Style[
                StringJoin[SuonaConNoi`Private`note$, " ", 
                 ToString[SuonaConNoi`Private`oct$]], 10, White, "Label"], {
               0.25, 3.5}, {0, 0}, {0, 1}], {}]}, 
            ImageSize -> {
             12 SuonaConNoi`Private`scale, 60 SuonaConNoi`Private`scale}, 
            PlotRange -> {{0, 0.5}, {2.5, 5}}, ImageMargins -> 0], 
           EventHandler[
            Dynamic[
             Graphics[{{
                EdgeForm[Black], 
                Switch[2, 0, 
                 If[
                 SuonaConNoi`Private`selectedNoteLearn == 
                  SuonaConNoi`Private`joinNote[
                   SuonaConNoi`Private`note$, SuonaConNoi`Private`oct$], 
                  Darker[Green], Black], 1, 
                 If[
                 SuonaConNoi`Private`selectedNoteTutorial == 
                  SuonaConNoi`Private`joinNote[
                   SuonaConNoi`Private`note$, SuonaConNoi`Private`oct$], 
                  Darker[Green], 
                  If[
                   And[
                   SuonaConNoi`Private`dwn, 
                    SuonaConNoi`Private`selectedNoteTutorial != "", 
                    SuonaConNoi`Private`selectedNoteTutorial != "END"], 
                   Darker[Red], Black]], 2, Black], 
                Rectangle[{
                  If[SuonaConNoi`Private`dwn, 0.05, 0], 2.5}, {
                  If[SuonaConNoi`Private`dwn, 0.4, 0.5], 5}], 
                If[SuonaConNoi`Private`shownotes$$, 
                 Text[
                  Style[
                   StringJoin[SuonaConNoi`Private`note$, " ", 
                    ToString[SuonaConNoi`Private`oct$]], 
                   If[SuonaConNoi`Private`dwn, 9, 10], White, "Label"], {0.25,
                   3.5}, {0, 0}, {0, 1}], {}]}}, 
              ImageSize -> {
               12 SuonaConNoi`Private`scale, 60 SuonaConNoi`Private`scale}, 
              PlotRange -> {{0, 0.5}, {2.5, 5}}, ImageMargins -> 0]], {
            "MouseDown" :> (SuonaConNoi`Private`dwn = True; 
              SuonaConNoi`Private`onKeyDown[
               SuonaConNoi`Private`note$, SuonaConNoi`Private`oct$]), 
             "MouseUp" :> (SuonaConNoi`Private`dwn = False; 
              SuonaConNoi`Private`onKeyUp[
               SuonaConNoi`Private`note$, SuonaConNoi`Private`oct$])}]]; 
        SuonaConNoi`Private`whiteset[
           Pattern[SuonaConNoi`Private`oct, 
            Blank[]]] := Grid[{
            Flatten[
             Map[
             SuonaConNoi`Private`whitekey[#, SuonaConNoi`Private`oct]& , {
              "C", "D", "E", "F", "G", "A", "B"}]]}, Spacings -> 0]; 
        SuonaConNoi`Private`blackset[
           Pattern[SuonaConNoi`Private`oct, 
            Blank[]]] := Grid[{{SuonaConNoi`Private`vert, 
             SuonaConNoi`Private`space[15], 
             SuonaConNoi`Private`blackkey["C#", SuonaConNoi`Private`oct], 
             SuonaConNoi`Private`space[10], 
             SuonaConNoi`Private`blackkey["D#", SuonaConNoi`Private`oct], 
             SuonaConNoi`Private`space[13], SuonaConNoi`Private`vert, 
             SuonaConNoi`Private`vert, 
             SuonaConNoi`Private`space[14], 
             SuonaConNoi`Private`blackkey["F#", SuonaConNoi`Private`oct], 
             SuonaConNoi`Private`space[10], 
             SuonaConNoi`Private`blackkey["G#", SuonaConNoi`Private`oct], 
             SuonaConNoi`Private`space[10], 
             SuonaConNoi`Private`blackkey["A#", SuonaConNoi`Private`oct], 
             SuonaConNoi`Private`space[14], SuonaConNoi`Private`vert}}, 
           Spacings -> 0, Alignment -> Left]; 
        SuonaConNoi`Private`keyboardsplit[
           Pattern[SuonaConNoi`Private`initOct, 
            Blank[]], 
           Pattern[SuonaConNoi`Private`numOct, 
            Blank[]]] := Grid[{
            Flatten[
             Table[
              SuonaConNoi`Private`blackset[SuonaConNoi`Private`i], {
              SuonaConNoi`Private`i, SuonaConNoi`Private`initOct, 
               SuonaConNoi`Private`initOct + SuonaConNoi`Private`numOct - 
               1}]], 
            Flatten[
             Table[
              SuonaConNoi`Private`whiteset[SuonaConNoi`Private`i], {
              SuonaConNoi`Private`i, SuonaConNoi`Private`initOct, 
               SuonaConNoi`Private`initOct + SuonaConNoi`Private`numOct - 
               1}]]}, Spacings -> {"Columns" -> {{0}}, "Rows" -> {{-0.1}}}, 
           Alignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}]; Deploy[
          SuonaConNoi`Private`keyboardsplit[
           Switch[
           2, 0, SuonaConNoi`Private`initOctLearn, 1, 
            SuonaConNoi`Private`initOctTutorial, 2, 
            SuonaConNoi`Private`initOctFree], 
           Switch[
           2, 0, SuonaConNoi`Private`numOctLearn, 1, 
            SuonaConNoi`Private`numOctTutorial, 2, 
            SuonaConNoi`Private`numOctFree]]]), 
       "Specifications" :> {{{
          SuonaConNoi`Private`shownotes$$, False, "Mostra note"}, {
          True, False}}}, 
       "Options" :> {
        TrackedSymbols :> {
          SuonaConNoi`Private`shownotes$$, 
           SuonaConNoi`Private`selectedNoteLearn, 
           SuonaConNoi`Private`selectedNoteTutorial, 
           SuonaConNoi`Private`initOctLearn, 
           SuonaConNoi`Private`initOctTutorial, 
           SuonaConNoi`Private`initOctFree, SuonaConNoi`Private`numOctLearn, 
           SuonaConNoi`Private`numOctTutorial, 
           SuonaConNoi`Private`numOctFree}, LocalizeVariables -> False, 
         ContinuousAction -> False}, "DefaultOptions" :> {}],
      ImageSizeCache->{919., {181., 187.}},
      SingleEvaluation->True],
     Deinitialization:>None,
     DynamicModuleValues:>{},
     Initialization:>({SuonaConNoi`Private`dwn = False}; 
      Typeset`initDone$$ = True),
     SynchronousInitialization->True,
     UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
     UnsavedVariables:>{Typeset`initDone$$},
     UntrackedVariables:>{Typeset`size$$}], "Manipulate",
    Deployed->True,
    StripOnInput->False],
   Manipulate`InterpretManipulate[1]],
  DynamicModuleValues:>{}]], "Output",
 CellChangeTimes->{3.8305986795669365`*^9},
 CellLabel->"Out[5]=",ExpressionUUID->"b33a86fe-eaa9-4c3a-9a92-26f265d4d085"]
}, Open  ]]
},
WindowSize->{1106, 892},
WindowMargins->{{Automatic, -13}, {Automatic, 30}},
TaggingRules->{
 "WelcomeScreenSettings" -> {"FEStarting" -> False}, "TryRealOnly" -> False},
Magnification:>1. Inherited,
FrontEndVersion->"12.2 for Microsoft Windows (64-bit) (December 12, 2020)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"c74a5222-7a37-4251-95cd-d73b2191a3c6"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 1699, 32, 48, "Input",ExpressionUUID->"9a9f7170-c734-4902-8ab4-66271908c5ea"],
Cell[2282, 56, 22969, 437, 527, "Output",ExpressionUUID->"9ba9f496-1fd7-455b-a17a-32bcf398f8a9"]
}, Open  ]],
Cell[CellGroupData[{
Cell[25288, 498, 527, 7, 28, "Input",ExpressionUUID->"e332816b-b505-42fd-ad9e-1a33f929504f"],
Cell[25818, 507, 46000, 885, 537, "Output",ExpressionUUID->"5ea615a5-0231-41c2-acf0-d6b5e0f823f9"]
}, Open  ]],
Cell[CellGroupData[{
Cell[71855, 1397, 278, 4, 28, "Input",ExpressionUUID->"935eea3e-d62c-4977-a0ab-20040a23bb46"],
Cell[72136, 1403, 12330, 258, 387, "Output",ExpressionUUID->"b33a86fe-eaa9-4c3a-9a92-26f265d4d085"]
}, Open  ]]
}
]
*)

